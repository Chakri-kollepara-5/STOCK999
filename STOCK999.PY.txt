# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uy6kMBVQZeP1tDSpE8S6DReh6pJ6m3cv
"""

import streamlit as st
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
from datetime import datetime
import requests

st.title("Stock Price Prediction using LSTM")

stock_symbol = st.text_input("Enter Stock Symbol (e.g., AAPL, GOOGL):", "AAPL")

if st.button("Fetch Data & Predict"):
    st.write(f"Fetching data for {stock_symbol}...")

    # Download data from Yahoo Finance
    start_date = '2012-01-01'
    end_date = datetime.now()
    data = yf.download(stock_symbol, start=start_date, end=end_date)

    st.subheader("Stock Data Preview")
    st.write(data.tail())

    # Plot Closing Price
    st.subheader("Closing Price Trend")
    plt.figure(figsize=(10,5))
    plt.plot(data['Close'], label="Close Price")
    plt.xlabel('Date')
    plt.ylabel('Close Price USD ($)')
    plt.legend()
    st.pyplot(plt)

    # Prepare Data for LSTM Model
    scaler = MinMaxScaler(feature_range=(0,1))
    scaled_data = scaler.fit_transform(data[['Close']])

    training_data_len = int(np.ceil(len(scaled_data) * 0.95))
    train_data = scaled_data[:training_data_len]

    x_train, y_train = [], []
    for i in range(60, len(train_data)):
        x_train.append(train_data[i-60:i, 0])
        y_train.append(train_data[i, 0])

    x_train, y_train = np.array(x_train), np.array(y_train)
    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

    # LSTM Model
    model = Sequential([
        LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)),
        Dropout(0.2),
        LSTM(50, return_sequences=False),
        Dropout(0.2),
        Dense(25),
        Dense(1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')

    model.fit(x_train, y_train, batch_size=1, epochs=1)

    # Predict Future Price
    test_data = scaled_data[training_data_len - 60:, :]
    x_test = []
    for i in range(60, len(test_data)):
        x_test.append(test_data[i-60:i, 0])

    x_test = np.array(x_test)
    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

    predictions = model.predict(x_test)
    predictions = scaler.inverse_transform(predictions)

    # Plot Predictions
    valid = data[training_data_len:].copy()
    valid['Predictions'] = predictions

    st.subheader("Actual vs Predicted Prices")
    plt.figure(figsize=(10,5))
    plt.plot(data['Close'], label='Actual Price', color='blue')
    plt.plot(valid['Predictions'], label='Predicted Price', color='orange')
    plt.xlabel('Date')
    plt.ylabel('Close Price USD ($)')
    plt.legend()
    st.pyplot(plt)

!pip install yfinance

pip install -r requirements.txt



import streamlit as st
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
from datetime import datetime
import requests

st.title("Stock Price Prediction using LSTM")

stock_symbol = st.text_input("Enter Stock Symbol (e.g., AAPL, GOOGL):", "AAPL")

if st.button("Fetch Data & Predict"):
    st.write(f"Fetching data for {stock_symbol}...")

    # Download data from Yahoo Finance
    start_date = '2012-01-01'
    end_date = datetime.now()
    data = yf.download(stock_symbol, start=start_date, end=end_date)

    st.subheader("Stock Data Preview")
    st.write(data.tail())

    # Plot Closing Price
    st.subheader("Closing Price Trend")
    plt.figure(figsize=(10,5))
    plt.plot(data['Close'], label="Close Price")
    plt.xlabel('Date')
    plt.ylabel('Close Price USD ($)')
    plt.legend()
    st.pyplot(plt)

    # Prepare Data for LSTM Model
    scaler = MinMaxScaler(feature_range=(0,1))
    scaled_data = scaler.fit_transform(data[['Close']])

    training_data_len = int(np.ceil(len(scaled_data) * 0.95))
    train_data = scaled_data[:training_data_len]

    x_train, y_train = [], []
    for i in range(60, len(train_data)):
        x_train.append(train_data[i-60:i, 0])
        y_train.append(train_data[i, 0])

    x_train, y_train = np.array(x_train), np.array(y_train)
    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

    # LSTM Model
    model = Sequential([
        LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)),
        Dropout(0.2),
        LSTM(50, return_sequences=False),
        Dropout(0.2),
        Dense(25),
        Dense(1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')

    model.fit(x_train, y_train, batch_size=1, epochs=1)

    # Predict Future Price
    test_data = scaled_data[training_data_len - 60:, :]
    x_test = []
    for i in range(60, len(test_data)):
        x_test.append(test_data[i-60:i, 0])

    x_test = np.array(x_test)
    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

    predictions = model.predict(x_test)
    predictions = scaler.inverse_transform(predictions)

    # Plot Predictions
    valid = data[training_data_len:].copy()
    valid['Predictions'] = predictions

    st.subheader("Actual vs Predicted Prices")
    plt.figure(figsize=(10,5))
    plt.plot(data['Close'], label='Actual Price', color='blue')
    plt.plot(valid['Predictions'], label='Predicted Price', color='orange')
    plt.xlabel('Date')
    plt.ylabel('Close Price USD ($)')
    plt.legend()
    st.pyplot(plt)

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
plt.style.use("fivethirtyeight")
# %matplotlib inline

# For reading stock data from yahoo
from pandas_datareader.data import DataReader
import yfinance as yf
from pandas_datareader import data as pdr



# For time stamps
from datetime import datetime


# The tech stocks we'll use for this analysis
tech_list = ['AAPL', 'GOOG', 'MSFT', 'AMZN']

# Set up End and Start times for data grab
tech_list = ['AAPL', 'GOOG', 'MSFT', 'AMZN']

end = datetime.now()
start = datetime(end.year - 1, end.month, end.day)

for stock in tech_list:
    globals()[stock] = yf.download(stock, start, end)


company_list = [AAPL, GOOG, MSFT, AMZN]
company_name = ["APPLE", "GOOGLE", "MICROSOFT", "AMAZON"]

for company, com_name in zip(company_list, company_name):
    company["company_name"] = com_name

df = pd.concat(company_list, axis=0)
df.tail(10)

plt.figure(figsize=(15, 10))
plt.subplots_adjust(top=1.25, bottom=1.2)

for i, company in enumerate(company_list, 1):
    plt.subplot(2, 2, i)
    # Check if 'Adj Close' exists, if not try 'Close'
    if 'Adj Close' in company.columns:
        company['Adj Close'].plot()
    else:
        company['Close'].plot()
    plt.ylabel('Adj Close')
    plt.xlabel(None)
    plt.title(f"Closing Price of {tech_list[i - 1]}")

plt.tight_layout()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from datetime import datetime

# Set up the tech stocks we'll use for this analysis
tech_list = ['AAPL', 'GOOG', 'MSFT', 'AMZN']

# Set up End and Start times for data grab
end = datetime.now()
start = datetime(end.year - 1, end.month, end.day)

# Download stock data
company_list = []
for stock in tech_list:
    data = yf.download(stock, start, end)
    data['company_name'] = stock  # Add a column for the company name
    company_list.append(data)

# Calculate Daily Returns
for company in company_list:
    # Check if 'Adj Close' exists, if not try 'Close'
    close_col = 'Adj Close' if 'Adj Close' in company.columns else 'Close'
    company['Daily Return'] = company[close_col].pct_change()

# Debugging: Print the columns of each DataFrame to check for 'Daily Return'
for i, company in enumerate(company_list):
    print(f"{tech_list[i]} DataFrame columns: {company.columns}")


# Plotting the Daily Returns
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15, 10))
fig.set_figheight(10)
fig.set_figwidth(15)

# Plot for each company
AAPL = company_list[0]
GOOG = company_list[1]
MSFT = company_list[2]
AMZN = company_list[3]

# Apple Daily Return Plot
AAPL['Daily Return'].plot(ax=axes[0, 0], legend=True, linestyle='--', marker='o', color='blue')
axes[0, 0].set_title('APPLE')
axes[0, 0].set_ylabel('Daily Return')

# Google Daily Return Plot
GOOG['Daily Return'].plot(ax=axes[0, 1], legend=True, linestyle='--', marker='o', color='orange')
axes[0, 1].set_title('GOOGLE')
axes[0, 1].set_ylabel('Daily Return')

# Microsoft Daily Return Plot
MSFT['Daily Return'].plot(ax=axes[1, 0], legend=True, linestyle='--', marker='o', color='green')
axes[1, 0].set_title('MICROSOFT')
axes[1, 0].set_ylabel('Daily Return')

# Amazon Daily Return Plot
AMZN['Daily Return'].plot(ax=axes[1, 1], legend=True, linestyle='--', marker='o', color='red')
axes[1, 1].set_title('AMAZON')
axes[1, 1].set_ylabel('Daily Return')

# Adjust layout
fig.tight_layout()
plt.show()

plt.figure(figsize=(12, 9))

for i, company in enumerate(company_list, 1):
    plt.subplot(2, 2, i)
    company['Daily Return'].hist(bins=50)
    plt.xlabel('Daily Return')
    plt.ylabel('Counts')
    plt.title(f'{company_name[i - 1]}')

plt.tight_layout()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from datetime import datetime

# Set up the tech stocks we'll use for this analysis
tech_list = ['AAPL', 'GOOG', 'MSFT', 'AMZN']

# Set up End and Start times for data grab
end = datetime.now()
start = datetime(end.year - 1, end.month, end.day)

# Download adjusted closing prices for the tech stocks
closing_df = yf.download(tech_list, start=start, end=end)

# Check the structure of the downloaded DataFrame
print(closing_df.head())  # Print the first few rows to see the available columns

# Use 'Adj Close' if available, otherwise use 'Close'
if 'Adj Close' in closing_df.columns:
    closing_df = closing_df['Adj Close']
else:
    closing_df = closing_df['Close']

# Make a new tech returns DataFrame
tech_rets = closing_df.pct_change()

# Display the first few rows of the returns DataFrame
print(tech_rets.head())

sns.jointplot(x='GOOG', y='GOOG', data=tech_rets, kind='scatter', color='seagreen')

sns.jointplot(x='GOOG', y='MSFT', data=tech_rets, kind='scatter')

sns.pairplot(tech_rets, kind='reg')

