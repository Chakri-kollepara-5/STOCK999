# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uy6kMBVQZeP1tDSpE8S6DReh6pJ6m3cv
"""

import streamlit as st
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
from datetime import datetime
import requests

st.title("Stock Price Prediction using LSTM")

stock_symbol = st.text_input("Enter Stock Symbol (e.g., AAPL, GOOGL):", "AAPL")

if st.button("Fetch Data & Predict"):
    st.write(f"Fetching data for {stock_symbol}...")

    # Download data from Yahoo Finance
    start_date = '2012-01-01'
    end_date = datetime.now()
    data = yf.download(stock_symbol, start=start_date, end=end_date)

    st.subheader("Stock Data Preview")
    st.write(data.tail())

    # Plot Closing Price
    st.subheader("Closing Price Trend")
    plt.figure(figsize=(10,5))
    plt.plot(data['Close'], label="Close Price")
    plt.xlabel('Date')
    plt.ylabel('Close Price USD ($)')
    plt.legend()
    st.pyplot(plt)

    # Prepare Data for LSTM Model
    scaler = MinMaxScaler(feature_range=(0,1))
    scaled_data = scaler.fit_transform(data[['Close']])

    training_data_len = int(np.ceil(len(scaled_data) * 0.95))
    train_data = scaled_data[:training_data_len]

    x_train, y_train = [], []
    for i in range(60, len(train_data)):
        x_train.append(train_data[i-60:i, 0])
        y_train.append(train_data[i, 0])

    x_train, y_train = np.array(x_train), np.array(y_train)
    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

    # LSTM Model
    model = Sequential([
        LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)),
        Dropout(0.2),
        LSTM(50, return_sequences=False),
        Dropout(0.2),
        Dense(25),
        Dense(1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')

    model.fit(x_train, y_train, batch_size=1, epochs=1)

    # Predict Future Price
    test_data = scaled_data[training_data_len - 60:, :]
    x_test = []
    for i in range(60, len(test_data)):
        x_test.append(test_data[i-60:i, 0])

    x_test = np.array(x_test)
    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

    predictions = model.predict(x_test)
    predictions = scaler.inverse_transform(predictions)

    # Plot Predictions
    valid = data[training_data_len:].copy()
    valid['Predictions'] = predictions

    st.subheader("Actual vs Predicted Prices")
    plt.figure(figsize=(10,5))
    plt.plot(data['Close'], label='Actual Price', color='blue')
    plt.plot(valid['Predictions'], label='Predicted Price', color='orange')
    plt.xlabel('Date')
    plt.ylabel('Close Price USD ($)')
    plt.legend()
    st.pyplot(plt)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
#



